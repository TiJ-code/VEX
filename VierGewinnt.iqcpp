{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor Move = motor(PORT1, false);\nmotor Drop = motor(PORT2, false);\nbumper Left = bumper(PORT10);\nbumper Right = bumper(PORT12);\ntouchled Apply = touchled(PORT11);\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0;\n\nfloat xR, yR;\nfloat xP, yP;\n\nfloat pointerX, pointerY;\n\nfloat gameBoard[5][7];\n\nint posI;\nint playerIndex = 1;\n\n\nconst char* printToBrainNumberFormat() {\n  switch(Brain_precision) {\n    case 0: return \"%.0f\";\n    case 1: return \"%.1f\";\n    case 2: return \"%.2f\";\n    case 3: return \"%.3f\";\n    default: return \"%f\";\n  }\n}\n\n\nvoid ResetBoard() {\n  yR = 0.0;\n  while (yR < 5) {\n    xR = 0.0;\n    while (xR < 7) {\n      gameBoard[static_cast<int>(xR)][static_cast<int>(yR)] = 0.0;\n      xR = xR + 1.0;\n    }\n    yR = yR + 1.0;\n  }\n  yR = 0.0;\n}\n\n\nvoid PrintBoard() {\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n  yR = 0.0;\n  while (yP < 5) {\n    xP = 0.0;\n    while (xP < 7) {\n      Brain.Screen.print(printToBrainNumberFormat(), static_cast<float>(gameBoard[static_cast<int>(xP)][static_cast<int>(yP)]));\n      Brain.Screen.print(\" \");\n      xP = xP + 1;\n    }\n    yP = yP + 1;\n    Brain.Screen.newLine();\n  }\n  yR = 0.0;\n}\n\n\nvoid eventLeftPressed() {\n  if (!(posI > 0)) {\n    Move.spinFor(reverse, 55.71f, degrees, true);\n    posI = posI - 1;\n  }\n}\n\n\nvoid eventRightPressed() {\n  if (!(posI < 7)) {\n    Move.spinFor(reverse, 55.71f, degrees, true);\n    posI = posI + 1;\n  }\n}\n\n\nvoid togglePlayer() {\n  if (playerIndex == 1) {\n    playerIndex = 2;\n  } else {\n    playerIndex = 1;\n  }\n}\n\n\nvoid eventApplyPressed() {\n  Drop.spinFor(forward, 30.5f, degrees, true);\n  wait(10, msec);\n  Drop.spinFor(reverse, 30.5f, degrees, true);\n\n  yP = 5;\n  while (true) {\n    while (yP > 0) {\n      if (gameBoard[static_cast<int>(posI)][static_cast<int>(yP)] == 0) {\n        gameBoard[static_cast<int>(posI)][static_cast<int>(yP)] = playerIndex;\n        togglePlayer();\n        break;\n      }\n      yP = yP - 1.0;\n    }\n    wait(20, msec);\n  }\n  yP = 0;\n\n  Move.spinToPosition(0, degrees, true);\n  PrintBoard();\n}\n\n\nvoid whenStarted1() {\n  ResetBoard();\n  PrintBoard();\n\n  Move.spin(forward);\n  wait(375, msec);\n  while (true) {\n    if(Move.current(percent) >= 38) {\n      Move.stop();\n      break;\n    }\n  }\n  while(true) {}\n\n  Move.setPosition(0, degrees);\n  posI = 0;\n}\n\n\nint main() {\n  Left.pressed(eventLeftPressed);\n  Right.pressed(eventRightPressed);\n  Apply.pressed(eventApplyPressed);\n\n  whenStarted1();\n}\n\n// Gewinnüberprüfung funktioniert leider nicht, da es zu viele Möglichkeiten gibt.\n// Das Brain stürzt nach 5 Überprungen ab und startet neu.","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Move","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"vorwärts","rev":"rückwärts"},"triportSourcePort":22},{"port":[2],"name":"Drop","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"vorwärts","rev":"rückwärts"},"triportSourcePort":22},{"port":[10],"name":"Left","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[12],"name":"Right","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[11],"name":"Apply","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}